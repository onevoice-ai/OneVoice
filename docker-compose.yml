version: '3'
networks:
  app_net:
    driver: bridge

# Define all the services for this application
services:

  # Zookeeper service
  zookeeper:
    image: wurstmeister/zookeeper  # use the official Zookeeper image
    platform: linux/amd64
    expose:  # ports to expose within the internal network, not to the host machine
      - 2181
    healthcheck:  # healthcheck command for Zookeeper service
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always  # always restart this service if it stops
    networks:  # this service belongs to these networks
      - app_net

  # Kafka service
  kafka:
    image: wurstmeister/kafka  # use the official Kafka image
    expose:  # ports to expose within the internal network, not to the host machine
      - 9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'  # enable automatic topic creation for Kafka
      KAFKA_CREATE_TOPICS: "management.user.create,management.user.update,management.user.delete,management.organisation.create,management.organisation.update,management.organisation.delete,management.business-unit.create,management.business-unit.update,management.business-unit.delete"  # create these topics when Kafka starts
    healthcheck:  # healthcheck command for Kafka service
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      timeout: 30s
      retries: 5
    restart: always  # always restart this service if it stops
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:  # this service belongs to these networks
      - app_net
    depends_on:
      zookeeper:
        condition: service_healthy  # only start this service if the zookeeper service is healthy

  # Redis service
  redis:
    image: redis  # use the official Redis image
    expose:  # ports to expose within the internal network, not to the host machine
      - 6379
    healthcheck:  # healthcheck command for Redis service
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 5
    restart: always  # always restart this service if it stops
    networks:  # this service belongs to these networks
      - app_net

    # primary PostgreSQL database service
  db-master:
    image: postgres:16-alpine  # use the official PostgreSQL image
    env_file: .env  # Load environment variables from a file named .env
    ports:  # map the PostgreSQL port to a port on the host machine
      - '${PRIMARY_POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:  # map the data directory in the container to a folder on the host machine
      - ./postgres-master-data:/var/lib/postgresql/data:delegate
      - ./db-master-entrypoint.sh:/docker-entrypoint-initdb.d/custom_entrypoint.sh
    entrypoint: ["/docker-entrypoint-initdb.d/custom_entrypoint.sh"]
    healthcheck:  # healthcheck command for PostgreSQL service
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$CORE_DB"]
      interval: 5s
      retries: 5
    restart: always  # always restart this service if it stops
    networks:  # this service belongs to these networks
      - app_net

  # secondary PostgreSQL database service
  db-slave:
    image: postgres:16-alpine  # use the official PostgreSQL image
    env_file: .env  # Load environment variables from a file named .env
    ports: # map the PostgreSQL port to a port on the host machine
      - '${SECONDARY_POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes: # map the data directory in the container to a folder on the host machine
      - ./postgres-slave-data:/var/lib/postgresql/data:delegate
      - ./db-slave-entrypoint.sh:/docker-entrypoint-initdb.d/custom_entrypoint.sh
    entrypoint: ["/docker-entrypoint-initdb.d/custom_entrypoint.sh"]
    healthcheck: # healthcheck command for PostgreSQL service
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$CORE_DB"]
      interval: 5s
      retries: 5
    restart: always  # always restart this service if it stops
    networks: # this service belongs to these networks
      - app_net
    depends_on:
      db-master:
        condition: service_healthy  # only start this service if the db-master service is healthy

# Declare volumes that can be used by services. Here, we're declaring a volume named 'db'.
volumes:
  postgres-master-data:
    driver: local
  postgres-slave-data:
    driver: local
